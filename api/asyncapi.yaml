asyncapi: 3.0.0
info:
  title: Smart Gardening
  version: 1.0.0
  description: TODO
  license:
    name: The Unlicense
    url: https://unlicense.org/
servers:
  firebase:
    host: todo
    protocol: https
  mosquitto:
    host: test.mosquitto.org
    protocol: mqtt
channels:
  polytunnels:
    servers:
      - $ref: '#/servers/firebase'
    address: polytunnels
    messages:
      PolytunnelDTO:
        $ref: '#/components/messages/PolytunnelDTO'
      PolytunnelStatusDTO:
        $ref: '#/components/messages/PolytunnelStatusDTO'
  polytunnelsWithId:
    address: polytunnels/{id}
    parameters:
      id:
        description: The ID of the polytunnel.
operations:
  onPolytunnelCreate:
    action: receive
    channel:
      $ref: '#/channels/polytunnels'
    messages:
      - $ref: '#/channels/polytunnels/messages/PolytunnelDTO'
  onPolytunnelCreated:
    action: send
    channel:
      $ref: '#/channels/polytunnels'
    messages:
      - $ref: '#/channels/polytunnels/messages/PolytunnelStatusDTO'
components:
  messages:
    PolytunnelDTO:
      payload:
        type: object
        required:
          - id
          - operation
        properties:
          id:
            type: string
            format: uuid
            description: The ID of the polytunnel.
          operation:
            type: string
            description: The operation to do with the polytunnel.
            "enum": [
              "create",
              "update",
              "delete"
            ]
          crop:
            $ref: '#/components/schemas/Crop'
    PolytunnelStatusDTO:
      payload:
        type: object
        required:
          - id
          - status
        properties:
          id:
            type: string
            format: uuid
            description: The ID of the polytunnel.
          status:
            type: string
            description: The status of the polytunnel.
            "enum": [
              "created",
              "updated",
              "deleted"
            ]
  schemas:
    Crop:
      type: object
      required:
        - name
        - needs
      properties:
        name:
          type: string
          description: The name of the crop.
        needs:
          $ref: '#/components/schemas/Needs'
    Needs:
      type: object
      required:
        - soilMoisture
        - temperature
        - humidity
        - light
      properties:
        soilMoisture:
          $ref: '#/components/schemas/Range'
        temperature:
          $ref: '#/components/schemas/Range'
        humidity:
          $ref: '#/components/schemas/Range'
        light:
          $ref: '#/components/schemas/Range'
    Range:
      type: object
      required:
        - min
        - max
      properties:
        min:
          type: number
          format: float
        max:
          type: number
          format: float

# ui
  # send create (FB)					/controller
  # receive availPolytunnels (FB)				/polytunnels
  # receive temp/humidity/soilMoisture/heater/lamp (FB)	/polytunnels/<UUID>/info
# controller
  # receive create (FB)					/controller
  # send availPolytunnels (FB)				/polytunnels
  # send temp/light (MQTT)				/environment/info
  # receive temp/humidity/soilMoisture/heater/lamp (MQTT)	/polytunnels/<UUID>/info
  # send temp/humidity/soilMoisture/heater/lamp (FB)	/polytunnels/<UUID>/info
# polytunnel
  # receive temp/light (MQTT)				/environment/info
  # send temp/humidity/soilMoisture/heater/lamp (MQTT)	/polytunnels/<UUID>/info


# ui <FB> controller <MQTT> polytunnel
