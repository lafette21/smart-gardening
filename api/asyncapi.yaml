asyncapi: 3.0.0
info:
  title: Smart Gardening
  version: 1.0.0
  description: TODO
  license:
    name: The Unlicense
    url: https://unlicense.org/
servers:
  firebase:
    host: test.europe-west1.firebasedatabase.app
    protocol: https
  mosquitto:
    host: test.mosquitto.org
    protocol: mqtt
channels:
  polytunnels:
    servers:
      - $ref: '#/servers/firebase'
    address: /polytunnels
    messages:
      PolytunnelList:
        $ref: '#/components/messages/PolytunnelList'
  polytunnelsCreate:
    servers:
      - $ref: '#/servers/firebase'
    address: /polytunnels/create
    messages:
      PolytunnelNeeds:
        $ref: '#/components/messages/PolytunnelNeeds'
  polytunnelsInfoFB:
    servers:
      - $ref: '#/servers/firebase'
    address: /polytunnels/{id}/info
    parameters:
      id:
        description: The ID of the polytunnel.
    messages:
      PolytunnelInfoFB:
        $ref: '#/components/messages/PolytunnelInfoFB'
  polytunnelsInfoMQTT:
    servers:
      - $ref: '#/servers/mosquitto'
    address: /polytunnels/{id}/info
    parameters:
      id:
        description: The ID of the polytunnel.
    messages:
      PolytunnelInfoMQTT:
        $ref: '#/components/messages/PolytunnelInfoMQTT'
  polytunnelsIntervene:
    servers:
      - $ref: '#/servers/firebase'
      - $ref: '#/servers/mosquitto'
    address: /polytunnels/{id}/intervene
    parameters:
      id:
        description: The ID of the polytunnel.
    messages:
      Intervention:
        $ref: '#/components/messages/Intervention'
  environmentInfo:
    servers:
      - $ref: '#/servers/firebase'
      - $ref: '#/servers/mosquitto'
    address: /environment/info
    messages:
      EnvironmentInfo:
        $ref: '#/components/messages/EnvironmentInfo'
operations:
  sendPolytunnelList:
    action: send
    channel:
      $ref: '#/channels/polytunnels'
    messages:
      - $ref: '#/channels/polytunnels/messages/PolytunnelList'
  onPolytunnelList:
    action: receive
    channel:
      $ref: '#/channels/polytunnels'
    messages:
      - $ref: '#/channels/polytunnels/messages/PolytunnelList'
  sendPolytunnelCreationReq:
    action: send
    channel:
      $ref: '#/channels/polytunnelsCreate'
    messages:
      - $ref: '#/channels/polytunnelsCreate/messages/PolytunnelNeeds'
  onPolytunnelCreationReq:
    action: receive
    channel:
      $ref: '#/channels/polytunnelsCreate'
    messages:
      - $ref: '#/channels/polytunnelsCreate/messages/PolytunnelNeeds'
  sendPolytunnelInfoFB:
    action: send
    channel:
      $ref: '#/channels/polytunnelsInfoFB'
    messages:
      - $ref: '#/channels/polytunnelsInfoFB/messages/PolytunnelInfoFB'
  onPolytunnelInfoFB:
    action: receive
    channel:
      $ref: '#/channels/polytunnelsInfoFB'
    messages:
      - $ref: '#/channels/polytunnelsInfoFB/messages/PolytunnelInfoFB'
  sendPolytunnelInfoMQTT:
    action: send
    channel:
      $ref: '#/channels/polytunnelsInfoMQTT'
    messages:
      - $ref: '#/channels/polytunnelsInfoMQTT/messages/PolytunnelInfoMQTT'
  onPolytunnelInfoMQTT:
    action: receive
    channel:
      $ref: '#/channels/polytunnelsInfoMQTT'
    messages:
      - $ref: '#/channels/polytunnelsInfoMQTT/messages/PolytunnelInfoMQTT'
  sendIntervention:
    action: send
    channel:
      $ref: '#/channels/polytunnelsIntervene'
    messages:
      - $ref: '#/channels/polytunnelsIntervene/messages/Intervention'
  onIntervention:
    action: receive
    channel:
      $ref: '#/channels/polytunnelsIntervene'
    messages:
      - $ref: '#/channels/polytunnelsIntervene/messages/Intervention'
  sendEnvironmentInfo:
    action: send
    channel:
      $ref: '#/channels/environmentInfo'
    messages:
      - $ref: '#/channels/environmentInfo/messages/EnvironmentInfo'
  onEnvironmentInfo:
    action: receive
    channel:
      $ref: '#/channels/environmentInfo'
    messages:
      - $ref: '#/channels/environmentInfo/messages/EnvironmentInfo'
components:
  messages:
    PolytunnelNeeds:
      payload:
        type: object
        required:
          - crop
        properties:
          crop:
            $ref: '#/components/schemas/CropRange'
    PolytunnelInfoFB:
      payload:
        type: object
        required:
          - crop
          - devices
        properties:
          crop:
            $ref: '#/components/schemas/Crop'
          devices:
            $ref: '#/components/schemas/Devices'
    PolytunnelInfoMQTT:
      payload:
        type: object
        required:
          - crop
          - devices
        properties:
          crop:
            $ref: '#/components/schemas/CropValue'
          devices:
            $ref: '#/components/schemas/Devices'
    PolytunnelList:
      payload:
        type: array
        items:
          type: string
          format: uuid
    Intervention:
      payload:
        type: object
        required:
          - device
          - action
        properties:
          device:
            type: string
            enum: [
              "heater",
              "lamp",
              "sprinkler"
            ]
          action:
            type: string
            enum: [
              "turn_on",
              "turn_off"
            ]
    EnvironmentInfo:
      payload:
        type: object
        required:
          - temperature
          - brightness
        properties:
          temperature:
            type: number
            format: float
            description: The temperature of the environment.
          brightness:
            type: number
            format: float
            description: The brightness of the environment.
            minimum: 0
            maximum: 1
  schemas:
    Crop:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          type: string
          description: The name of the crop.
        attributes:
          type: object
          required:
            - soilMoisture
            - temperature
            - humidity
            - brightness
          properties:
            soilMoisture:
              $ref: '#/components/schemas/RangeStatusValue'
            temperature:
              $ref: '#/components/schemas/RangeStatusValue'
            humidity:
              $ref: '#/components/schemas/RangeStatusValue'
            brightness:
              $ref: '#/components/schemas/RangeStatusValue'
    CropRange:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          type: string
          description: The name of the crop.
        attributes:
          type: object
          required:
            - soilMoisture
            - temperature
            - humidity
            - brightness
          properties:
            soilMoisture:
              $ref: '#/components/schemas/Range'
            temperature:
              $ref: '#/components/schemas/Range'
            humidity:
              $ref: '#/components/schemas/Range'
            brightness:
              $ref: '#/components/schemas/Range'
    CropValue:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          type: string
          description: The name of the crop.
        attributes:
          type: object
          required:
            - soilMoisture
            - temperature
            - humidity
            - brightness
          properties:
            soilMoisture:
              $ref: '#/components/schemas/Value'
            temperature:
              $ref: '#/components/schemas/Value'
            humidity:
              $ref: '#/components/schemas/Value'
            brightness:
              $ref: '#/components/schemas/Value'
    Range:
      type: object
      required:
        - range
      properties:
        range:
          type: object
          required:
            - min
            - max
          properties:
            min:
              type: number
              format: float
            max:
              type: number
              format: float
    Status:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [
            "Normal",
            "Critical"
          ]
    Value:
      type: object
      required:
        - value
      properties:
        value:
          type: number
          format: float
    RangeStatusValue:
      type: object
      required:
        - range
        - status
        - value
      properties:
        range:
          $ref: '#/components/schemas/Range/properties/range'
        status:
          $ref: '#/components/schemas/Status/properties/status'
        value:
          $ref: '#/components/schemas/Value/properties/value'
    Devices:
      type: object
      required:
        - heater
        - lamp
        - sprinkler
      properties:
        heater:
          type: boolean
        lamp:
          type: boolean
        sprinkler:
          type: boolean